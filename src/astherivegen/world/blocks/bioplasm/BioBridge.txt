package astherivegen.world.blocks.bioplasm;

import arc.Core;
import arc.graphics.*;
import arc.graphics.g2d.*;
import arc.graphics.g2d.TextureRegion;
import arc.math.*;
import arc.util.*;
import arc.util.io.*;
import arc.math.geom.*;
import arc.struct.*;
import mindustry.world.blocks.defense.*;
import mindustry.gen.Building;
import mindustry.graphics.*;
import mindustry.ui.*;
import mindustry.world.*;
import mindustry.world.Tile;
import mindustry.graphics.*;
import mindustry.content.*;
import mindustry.entities.*;
import mindustry.type.*;
import mindustry.world.meta.*;
import mindustry.gen.*;
import java.util.Random;
import astherivegen.graphics.*;
import astherivegen.content.bioplasm.Bioplasm;

import static mindustry.Vars.*;

public class Root extends BioBlock {
    public TextureRegion bridgeRegion = new TextureRegion[2];
    
    public Root(String name){
        super(name);
        update=true;
        isRoot=false;
        pulseScale=0.5f;
        priority = TargetPriority.transportation;
        solid = true;
        underBullets = false;
        hasItems = true;
        itemCapacity = 1;
        unloadable = false;
    }
    @Override
    public void load(){
        super.load();
        bridgeRegion = Core.atlas.find(name+"-bridge");
    }
    public class RootBuild extends BioBuilding {
        public int blending;
        public Item lastItem;
        public int itemTargetX = -1, itemTargetY = -1;
        
        @Override
        public void updateTile(){
            super.updateTile();
            for(int xm = -6+1;xm<=6;xm++){
                for(int ym = -6+1;ym<=6;ym++){
                    Tile other = world.tile(ox+xm,oy+ym);
                    if(other.block instanceof BioBridge){
                        //yes
                    }
                }
            }
        }
        @Override
        public void updatePulse(){
            super.updatePulse();
            if(tile != null && tile.drop() != null){
                boolean clear = true;
                for(int i=0;i<=1;i++){
                    for(int j=0;j<=1;j++){
                        Building adj;
                        adj = tile.nearby(i,j).build;
                        if (adj != null && !(adj instanceof RootBuild)) {                        
                            clear = false;
                        }
                    }
                }
                if(clear) tile.setBlock(Bioplasm.harvester,team);
            }
            if(lastItem == null && items.any()){
                lastItem = items.first();
            }
            if(itemTargetX == -1 || itemTargetY == -1){
                if(getNearestHeart()!=null){
                    itemTargetX = getNearestHeart().tile.x;
                    itemTargetY = getNearestHeart().tile.y;
                }
            }
            if(lastItem != null && itemTargetX != -1 && itemTargetY != -1) {
                Building target = null;
                float bestDist = Float.POSITIVE_INFINITY; //FEAR THE INFINITE POWER
                for(int i=0;i<4;i++){
                    Building adj;
                    adj = tile.nearby(Geometry.d4(i).x,Geometry.d4(i).y).build;
                    if(adj != null && (adj.block instanceof Root)){
                        float dist = Mathf.dst(itemTargetX, itemTargetY, adj.tile.x, adj.tile.y);
                        if(dist<bestDist&&adj.acceptItem(this, lastItem)){
                            target = adj;
                            bestDist = dist;
                        }
                    }
                }
                if(target != null && target instanceof BioBuilding && target.acceptItem(this, lastItem)){
                    target.handleItem(this, lastItem);
                    items.remove(lastItem, 1);
                    lastItem = null;
                }
            }
        }
        
        @Override
        public void draw(){
            Draw.z(Layer.blockUnder);
            if(fullyGrown){
                drawPulse(atlasRegion[horBitmask[blending]][verBitmask[blending]],drawPulseScale);
            } else {
                drawPulse(atlasRegion[3][3],drawPulseScale);
            }
            Fx.healBlockFull.at(tile.x, tile.y, tile.block().size, GenesisPal.bioGreen, tile.block());
            if (xyRand(x,y)<0.08f) {
                Draw.z(Layer.power-1.1f);
                // SHUT UP
                //Draw.rect(leafRegion[(xyRand(x+113f,y+197f)>0.5f)?0:1],x,y,xyRand(x+17f,y+11f)*360);
            }
            Draw.z(Layer.blockUnder+0.1f);
            if(lastItem!=null){
                Draw.rect(lastItem.fullIcon, x, y, itemSize, itemSize);
            }
        }

        public Building getNearestHeart() {
            return Units.findAllyTile(team, x, y, 1000, b -> b.block instanceof BioHeart);
        }

        //item mechanic

        @Override
        public int acceptStack(Item item, int amount, Teamc source){
            return 0;
        }

        @Override
        public boolean acceptItem(Building source, Item item){
            return team == source.team && lastItem == null && items.total() == 0;
        }

        @Override
        public void handleItem(Building source, Item item){
            items.add(item, 1);
            lastItem = item;
        }

        @Override
        public int removeStack(Item item, int amount){
            int result = super.removeStack(item, amount);
            if(result != 0 && item == lastItem){
                lastItem = null;
            }
            return result;
        }
    }
}
